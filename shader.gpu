// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 textureCoords;

uniform mat4 ModelViewMatrix, ProjectionMatrix;

varying vec2 vtextureCoords;

void main() {
    vec4 vertPosition4 = ModelViewMatrix * vec4(vertex, 1.0);
    vec3 vertPosition = vec3(vertPosition4) / vertPosition4.w;
    vtextureCoords = textureCoords;
    gl_Position = ProjectionMatrix*vertPosition4;
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif

varying vec2 vtextureCoords;
uniform sampler2D textureU;

void main() {
    vec4 texture = texture2D(textureU, vtextureCoords);
    gl_FragColor = texture;
}`;